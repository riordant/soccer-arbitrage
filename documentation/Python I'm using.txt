"if __name__ == '__main__':"
    - the main file.

no curly braces in python, all indented. conditional statements end with a ':', eg - "while True:"

class header definitions have (object) as a parameter. nothing is passed here though
"def __init__(self):" he basic class constructor. more parameters can be added after self.
"self" then refers to that class when assigning variables in the constructor. like "this" in java

in "for" loops, we can extract elements from a list more simply. eg. "for league in leagues" will get each element of leagues
in turn and store in leagues. no need for indexing.
enumerate() can be used on the list which returns the element index in pos 0 and the element in pos 1.
you can then refer to either using square brackets. eg time[0] will return the index of the time.


saving objects: why? makes testing easy. but is it useful when just getting objects
ok not saving OBJECTS, saving a WEBPAGE. yeah so i don't have to keep requesting the site
                                                   I will consistently know the results
                                                   obviously there'll be different test cases that involve a live setting.

strip: removes whitespace either side. same as trim in Java

convert milliseconds to a time: str(datetime.timedelta(milliseconds=*value*))

no multiple constructors in python.

the following is a multiline comment:
'''
stuff
'''

if you have the exact same variable name defined in two files, and you import one file into the other, the local
variable takes precedence over the import.
to specify the foreign var, use "filename.variablename". for this to work you have to have "import filename" in the header,
as opposed to "from filename import *", which is for loading functions and classes. you can use both imports simultaneously.

beautifulsoup: can use find_element_by_*, where * is replaced by different tag types.
VERY IMPORTANT: you can't directly extract the values of attributes, or the text of the overall tag with BS.
for values of attributes (eg. title = "manu", so manu is the value): you must use the CSS Selector to reduce the HTML, then use a loop to assign the values where needed.
for text (eg <div>TEXT</div>): again use the CSS Selector, but the difference is you can specify the element you want using a "[]".
see the titan file: teams extraction uses the former and bets extraction the later here.
or alternatively you can specify it directly, again see titan file.
i think you can use ".get(attribute)" OR "[attribute]"
ALSO - '.select' returns a LIST, and you want to get an attribute value or text, you MUST SPECTIFY THE LIST POSITION - different to jsoup,
which just returns the html as it's own type basically, that you directly call methods with. eg. if size 1 (usually)- '[0]'.

BE FUCKING CAREFUL WITH NAMING
loads of errors come as a result of this.

format for mktime: year, month, day, hours, minutes, seconds, weekday[0-6], yearday[1-366], daylight_savings (just put -1)

what do i want to do with times: convert to milliseconds. - think i just have to call "timestamp" on the object 
                                                            represent as a single string.
using the arrow library for time. I have now represented everything the same as SimpleDateFormat.
we parse the input first, and then format it. we can only call timestamp on the parsed object, format is just a string. 
 
    java: dd - Day in month explicitly containing 2 characters - 04,09,31. python: DD
    java: MMM - Month in english with 3 characters. python: MMM
    java: hh - hours in 2 numbers. python: hh
    java: mm - minutes in 2 numbers. python: mm
    : - same in both where necessary.
    java: yyyy - year in 4 numbers. python: YYYY.
    java: EE -  day in week in text, E or EEE. (no example for 2 Es.) python: ddd
    java: a - am/pm. python: a
    java: z - timezone in three characters. python: ZZ. no timezone in three characters; format is offset from gmt. ie "+01:00"
 
"You can change current working directory (used for "open(filename)") with os.chdir."

you have to make sure to refer to variables within the bookie like this from now on: {bookie_name}.{var_name}.